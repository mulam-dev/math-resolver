Assembly, C, Java | Python/JS/LISP | SQL, Haskell, Z3

关系型, 宏, 惰性求值, 文学型

关系演算系统

文法解析系统

求值性分析系统

x = udef
    x: udef
y = x + 3
    y: +(x 3)
    x - y
y <= 5
    y: +(x 3)
    y: 5
    x - y - 5
x => ?
    y: +(x 3) ->
        +(x 3): y ->
        x: ^+(y 3) ->
        x: -(y 3) >>
    x: 2

x = 3
    x: 3
    3 - x
y = x + 3
    y: +(x 3)
    3 - x - y
y <= 5
    y: +(x 3)
    y: 5
    3 - x - y - 5
x => ?
    y: +(x 3) ->
    x: -(y 3) ->
    x: 2


x = udef
y = x + 3
    y: +(x 3)
    x - y
z = y + 2
    z: y + 2
    x - y - z
z <= 5
    z: y + 2
    z: 5
    x - y - z - 5
x => ?
    y: +(x 3) ->
    x: -(y 3) ->
        y => ?
        z: y + 2
        y: z - 2
            z => ?
            z: 5
        y: 3
    x: 0

x = udef
y = x + 3
    y: x + 3
    x - y
z = x + y + 2
    z: x + y + 2
    x - y - z
    |       |
    '-------'
z = 5
    z: 5
    x - y - z - 5
    |       |
    '-------'
x => ? <------------------.
    z: x + y + 2          |
    x: z - y - 2          |
        z => ?            |
        z: 5              |
        y => ?            |
        y: x + 3          |
            x => ? cycle -'
            >> x: 5 - x - 3 - 2
                2x: 0
                x: 0 end

x = udef
k = udef
y = x + k + 3
    y: x + k + 3
    x   k - y
    |       |
    '-------'
z = x + y + 2
    z: x + y + 2
    x   k - y - z
    |       |   |
    |-------'   |
    '-----------'
z = 5
    z: 5
    x   k - y - z - 5
    |       |   |
    |-------'   |
    '-----------'
x => ? <------------------.
    z: x + y + 2          |
    x: z - y - 2          |
        z => ?            |
        z: 5              |
        y => ?            |
        y: x + k + 3      |
            x => ? cycle -'
            >> x: 5 - x - k - 3 - 2
                2x: - k
                x: - k / 2
                    k => ? break
                x: - k / 2 end

x = - x + 2
    x = - x + 2
    2x = 2
    x = 1
    x: 1
x => ?

以 + 操作为例，有取逆，交换，合并几个操作

1 = +(x 2) -> ^+(1 2) = x

+:
    resolve : (...vals) => 符号排前，数字排后，对数字和相同符号进行归并
    extract : (idx, inv, ...vals)
-:
    resolve : (val) =>

3 = +(+(x 2) 4)
